name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  NODE_VERSION: '18'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        env:
          CI: true

      - name: Generate coverage report
        run: npm run test:coverage
        continue-on-error: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report
          path: coverage/

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compiler
        run: npx tsc --noEmit

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test, type-check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'http://localhost:54321' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: .next/

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Check for security issues in code
        run: |
          # Check for hardcoded secrets
          if grep -r "SUPABASE_SERVICE_ROLE_KEY\|postgres:\/\/\|postgresql:\/\/" --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" .; then
            echo "⚠️ Warning: Potential secrets found in code"
            exit 1
          fi

  database-check:
    name: Validate Database Migrations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check migration files exist
        run: |
          if [ -z "$(ls -A supabase/migrations/*.sql 2>/dev/null)" ]; then
            echo "❌ No migration files found in supabase/migrations/"
            exit 1
          fi
          echo "✅ Migration files found"
          ls -la supabase/migrations/*.sql

      - name: Validate migration naming
        run: |
          for file in supabase/migrations/*.sql; do
            filename=$(basename "$file")
            if [[ ! "$filename" =~ ^[0-9]{8}(_[0-9]{6})?_.*\.sql$ ]]; then
              echo "❌ Invalid migration filename: $filename"
              echo "Expected format: YYYYMMDD_HHMMSS_description.sql or YYYYMMDD_description.sql"
              exit 1
            fi
          done
          echo "✅ All migration filenames are valid"

  deploy-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [build, security-scan, database-check]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Deployment readiness summary
        run: |
          echo "✅ All checks passed!"
          echo "Ready for deployment to production"
          echo ""
          echo "Checklist:"
          echo "- ✅ Code linted"
          echo "- ✅ Tests passed"
          echo "- ✅ TypeScript types valid"
          echo "- ✅ Build successful"
          echo "- ✅ Security scan completed"
          echo "- ✅ Database migrations validated"